is_share = model.matrix(~is_share-1)
training_f$is_share = NULL
is_verified = training_f$is_verified
is_verified = model.matrix(~is_verified-1)
training_f$is_verified = NULL
training_f = cbind(training_f, title_booktitle_flag, category, public_type, copyright_type,
streamtypes_hd2, gender, is_vip, is_share, is_verified)
View(is_share)
View(category)
View(category)
View(category)
test = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/test/I30_test_bp_features', sep = ''), header = TRUE)
test_l = test[, 3]
test_f = as.data.frame(test[, 4:length(test)])
title_booktitle_flag = test_f$title_booktitle_flag
title_booktitle_flag = model.matrix(~title_booktitle_flag-1)
test_f$title_booktitle_flag = NULL
category = test_f$category
category = model.matrix(~category-1)
test_f$category = NULL
public_type = test_f$public_type
public_type = model.matrix(~public_type-1)
test_f$public_type = NULL
copyright_type = test_f$copyright_type
copyright_type = model.matrix(~copyright_type-1)
test_f$copyright_type = NULL
streamtypes_hd2 = test_f$streamtypes_hd2
streamtypes_hd2 = model.matrix(~streamtypes_hd2-1)
test_f$streamtypes_hd2 = NULL
gender = test_f$gender
gender = model.matrix(~gender-1)
test_f$gender = NULL
is_vip = test_f$is_vip
is_vip = model.matrix(~is_vip-1)
test_f$is_vip = NULL
is_share = test_f$is_share
is_share = model.matrix(~is_share-1)
test_f$is_share = NULL
is_verified = test_f$is_verified
is_verified = model.matrix(~is_verified-1)
test_f$is_verified = NULL
test_f = cbind(test_f, title_booktitle_flag, category, public_type, copyright_type,
streamtypes_hd2, gender, is_vip, is_share, is_verified)
myKnn = knn(training_f, test_f, training_l, k = 3)
summary(myKnn)
str(myKnn)
length(which(test_l == 2))
length(which(test_l == FALSE))
ll = c(test_l)
pl = c(myKnn)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
library(class)
#workpath = 'F:/Video_Popularity/'
workpath = '/Users/ouyangshuxin/Documents/work/Video_Popularity/'
training = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/training/I30_training_bp_features', sep = ''), header = TRUE)
training_l = training[, 3]
training_f = as.data.frame(training[, 4:length(training)])
title_booktitle_flag = training_f$title_booktitle_flag
title_booktitle_flag = model.matrix(~title_booktitle_flag-1)
training_f$title_booktitle_flag = NULL
category = training_f$category
category = model.matrix(~category-1)
training_f$category = NULL
public_type = training_f$public_type
public_type = model.matrix(~public_type-1)
training_f$public_type = NULL
copyright_type = training_f$copyright_type
copyright_type = model.matrix(~copyright_type-1)
training_f$copyright_type = NULL
streamtypes_hd2 = training_f$streamtypes_hd2
streamtypes_hd2 = model.matrix(~streamtypes_hd2-1)
training_f$streamtypes_hd2 = NULL
gender = training_f$gender
gender = model.matrix(~gender-1)
training_f$gender = NULL
is_vip = training_f$is_vip
is_vip = model.matrix(~is_vip-1)
training_f$is_vip = NULL
is_share = training_f$is_share
is_share = model.matrix(~is_share-1)
training_f$is_share = NULL
is_verified = training_f$is_verified
is_verified = model.matrix(~is_verified-1)
training_f$is_verified = NULL
training_f = cbind(training_f, title_booktitle_flag, category, public_type, copyright_type,
streamtypes_hd2, gender, is_vip, is_share, is_verified)
test = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/test/I30_test_bp_features', sep = ''), header = TRUE)
test_l = test[, 3]
test_f = as.data.frame(test[, 4:length(test)])
title_booktitle_flag = test_f$title_booktitle_flag
title_booktitle_flag = model.matrix(~title_booktitle_flag-1)
test_f$title_booktitle_flag = NULL
category = test_f$category
category = model.matrix(~category-1)
test_f$category = NULL
public_type = test_f$public_type
public_type = model.matrix(~public_type-1)
test_f$public_type = NULL
copyright_type = test_f$copyright_type
copyright_type = model.matrix(~copyright_type-1)
test_f$copyright_type = NULL
streamtypes_hd2 = test_f$streamtypes_hd2
streamtypes_hd2 = model.matrix(~streamtypes_hd2-1)
test_f$streamtypes_hd2 = NULL
gender = test_f$gender
gender = model.matrix(~gender-1)
test_f$gender = NULL
is_vip = test_f$is_vip
is_vip = model.matrix(~is_vip-1)
test_f$is_vip = NULL
is_share = test_f$is_share
is_share = model.matrix(~is_share-1)
test_f$is_share = NULL
is_verified = test_f$is_verified
is_verified = model.matrix(~is_verified-1)
test_f$is_verified = NULL
test_f = cbind(test_f, title_booktitle_flag, category, public_type, copyright_type,
streamtypes_hd2, gender, is_vip, is_share, is_verified)
myKnn = knn(training_f, test_f, training_l, k = 3)
ll = c(test_l)
pl = c(myKnn)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
set.seed(10)
myKnn = knn(training_f, test_f, training_l, k = 3)
ll = c(test_l)
pl = c(myKnn)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
library(class)
#workpath = 'F:/Video_Popularity/'
workpath = '/Users/ouyangshuxin/Documents/work/Video_Popularity/'
training = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/training/I30_training_bp_features', sep = ''), header = TRUE)
training_l = training[, 3]
training_f = as.data.frame(training[, 4:length(training)])
title_booktitle_flag = training_f$title_booktitle_flag
title_booktitle_flag = model.matrix(~title_booktitle_flag-1)
training_f$title_booktitle_flag = NULL
category = training_f$category
category = model.matrix(~category-1)
training_f$category = NULL
public_type = training_f$public_type
public_type = model.matrix(~public_type-1)
training_f$public_type = NULL
copyright_type = training_f$copyright_type
copyright_type = model.matrix(~copyright_type-1)
training_f$copyright_type = NULL
streamtypes_hd2 = training_f$streamtypes_hd2
streamtypes_hd2 = model.matrix(~streamtypes_hd2-1)
training_f$streamtypes_hd2 = NULL
gender = training_f$gender
gender = model.matrix(~gender-1)
training_f$gender = NULL
is_vip = training_f$is_vip
is_vip = model.matrix(~is_vip-1)
training_f$is_vip = NULL
is_share = training_f$is_share
is_share = model.matrix(~is_share-1)
training_f$is_share = NULL
is_verified = training_f$is_verified
is_verified = model.matrix(~is_verified-1)
training_f$is_verified = NULL
training_f = cbind(training_f, title_booktitle_flag, category, public_type, copyright_type,
streamtypes_hd2, gender, is_vip, is_share, is_verified)
test = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/test/I30_test_bp_features', sep = ''), header = TRUE)
test_l = test[, 3]
test_f = as.data.frame(test[, 4:length(test)])
title_booktitle_flag = test_f$title_booktitle_flag
title_booktitle_flag = model.matrix(~title_booktitle_flag-1)
test_f$title_booktitle_flag = NULL
category = test_f$category
category = model.matrix(~category-1)
test_f$category = NULL
public_type = test_f$public_type
public_type = model.matrix(~public_type-1)
test_f$public_type = NULL
copyright_type = test_f$copyright_type
copyright_type = model.matrix(~copyright_type-1)
test_f$copyright_type = NULL
streamtypes_hd2 = test_f$streamtypes_hd2
streamtypes_hd2 = model.matrix(~streamtypes_hd2-1)
test_f$streamtypes_hd2 = NULL
gender = test_f$gender
gender = model.matrix(~gender-1)
test_f$gender = NULL
is_vip = test_f$is_vip
is_vip = model.matrix(~is_vip-1)
test_f$is_vip = NULL
is_share = test_f$is_share
is_share = model.matrix(~is_share-1)
test_f$is_share = NULL
is_verified = test_f$is_verified
is_verified = model.matrix(~is_verified-1)
test_f$is_verified = NULL
test_f = cbind(test_f, title_booktitle_flag, category, public_type, copyright_type,
streamtypes_hd2, gender, is_vip, is_share, is_verified)
set.seed(10)
myKnn = knn(training_f, test_f, training_l, k = 3)
ll = c(test_l)
pl = c(myKnn)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
table(pl, ll)
table(ll, pl)
myKnn == test_l
mean(myKnn == test_l)
accuracy = rep(0, 10)
k = 1:10
for(x in k){
set.seed(10)
prediction <- knn(training_f, test_f, training_l, k = x)
accuracy[x] <- mean(prediction == test_l)
}
plot(k, accuracy, type = 'b')
accuracy[3]
accuracy[10]
accuracy[9]
set.seed(10)
myKnn = knn(training_f, test_f, training_l, k = 9)
ll = c(test_l)
pl = c(myKnn)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
table(ll, pl)
8762 + 1639
10401 / 15466
library(randomForest)
#workpath = 'F:/Video_Popularity/'
workpath = '/Users/ouyangshuxin/Documents/work/Video_Popularity/'
install.packages("randomForest")
library(randomForest)
training = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/training/I30_training_bp_features', sep = ''), header = TRUE)
training_df = as.data.frame(training[, 3:length(training)])
set.seed(10)
myForestrf = randomForest(label ~ ., training_df)
test = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/test/I30_test_bp_features', sep = ''), header = TRUE)
levels(test$public_type) = levels(training$public_type)
set.seed(10)
predict = predict(myForestrf, test, type = 'class')
predict = predict(myForestrf, test, type = 'class')
levels(test$public_type) = levels(training$public_type)
set.seed(10)
predict = predict(myForestrf, test, type = 'class')
which(test$title_booktitle_flag == 0)
which(training$title_booktitle_flag == 0)
which(training_df$title_booktitle_flag == 0)
test[3759, ]
test = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/test/I30_test_bp_features', sep = ''), header = TRUE)
levels(test$public_type) = levels(training$public_type)
set.seed(10)
predict = predict(myForestrf, test, type = 'class')
ll = c(test$label)
pl = c(predict)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
2412 + 9078
library(randomForest)
#workpath = 'F:/Video_Popularity/'
workpath = '/Users/ouyangshuxin/Documents/work/Video_Popularity/'
training = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/training/I30_training_bp_features', sep = ''), header = TRUE)
training_df = as.data.frame(training[, 3:length(training)])
set.seed(10)
myForestrf = randomForest(label ~ ., training_df)
ll = c(training$label)
pl = c(myForestrf$predicted)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
test = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/test/I30_test_bp_features', sep = ''), header = TRUE)
levels(test$public_type) = levels(training$public_type)
set.seed(10)
predict = predict(myForestrf, test, type = 'class')
ll = c(test$label)
pl = c(predict)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
length(which(pl == ll & ll == 2))
# burst -> burst
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
2412 + 9078
library(rpart)
library(rpart.plot)
#workpath = 'F:/Video_Popularity/'
workpath = '/Users/ouyangshuxin/Documents/work/Video_Popularity/'
training = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/training/I30_training_bp_features', sep = ''), header = TRUE)
training_df = as.data.frame(training[, 3:length(training)])
set.seed(10)
mytree = rpart(label ~ ., training_df, control = rpart.control(xval = 10, cp = 0.001));
prune_cp_row = min((1 : dim(tree_cp)[1])[tree_cp[,"xerror"] < min(tree_cp[, "xerror"] + tree_cp[, "xstd"])])
mytree_prune = prune(mytree, cp = tree_cp[prune_cp_row, "CP"])
tree_cp = printcp(mytree)
#1-SE rule
prune_cp_row = min((1 : dim(tree_cp)[1])[tree_cp[,"xerror"] < min(tree_cp[, "xerror"] + tree_cp[, "xstd"])])
mytree_prune = prune(mytree, cp = tree_cp[prune_cp_row, "CP"])
printcp(mytree_prune)
print(mytree_prune$variable.importance);
plot(mytree_prune)
test = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/test/I30_test_bp_features', sep = ''), header = TRUE)
predict = predict(mytree_prune, test, type = 'class')
ll = c(test$label)
pl = c(predict)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
install.packages("e1071")
library(e1071)
#workpath = 'F:/Video_Popularity/'
workpath = '/Users/ouyangshuxin/Documents/work/Video_Popularity/'
training = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/training/I30_training_bp_features', sep = ''), header = TRUE)
training_df = as.data.frame(training[, 3:length(training)])
model = naiveBayes(label ~ ., data = training_df)
test = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/test/I30_test_bp_features', sep = ''), header = TRUE)
levels(test$public_type) = levels(training$public_type)
prediction <- predict(model, test)
ll = c(test$label)
pl = c(prediction)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
prediction <- predict(model, training_df)
ll = c(test$label)
pl = c(prediction)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
ll = c(training_df$label)
pl = c(prediction)
# burstf
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
library(e1071)
#workpath = 'F:/Video_Popularity/'
workpath = '/Users/ouyangshuxin/Documents/work/Video_Popularity/'
training = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/training/I30_training_bp_features', sep = ''), header = TRUE)
training_df = as.data.frame(training[, 3:length(training)])
model = naiveBayes(label ~ ., data = training_df)
test = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/test/I30_test_bp_features', sep = ''), header = TRUE)
levels(test$public_type) = levels(training$public_type)
prediction <- predict(model, test)
ll = c(test$label)
pl = c(prediction)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
4845 + 755
library(e1071)
#workpath = 'F:/Video_Popularity/'
workpath = '/Users/ouyangshuxin/Documents/work/Video_Popularity/'
training = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/training/I30_training_bp_features', sep = ''), header = TRUE)
training_df = as.data.frame(training[, 3:length(training)])
training_df$statuses_count = NULL
set.seed(10)
model = svm(label ~ ., data = training_df)
test = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/test/I30_test_bp_features', sep = ''), header = TRUE)
levels(test$public_type) = levels(training$public_type)
prediction <- predict(model, test)
ll = c(test$label)
pl = c(prediction)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
print(model)
summary(model)
model = svm(label ~ ., data = training_df, cost = 10)
print(model)
summary(model)
test = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/test/I30_test_bp_features', sep = ''), header = TRUE)
levels(test$public_type) = levels(training$public_type)
prediction <- predict(model, test)
ll = c(test$label)
pl = c(prediction)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
tune = tune(svm, label ~ ., data = training_df, ranges = list(cost = 10), tunecontrol = tune.control(cross = 0))
tune = tune(svm, label ~ ., data = training_df, ranges = list(cost = 10), tunecontrol = tune.control(cross = 3))
print(tune)
summary(tune)

training_true
training_true = training[TRUE == label, ]
training_true = training[, TRUE == label]
training_true = training[TRUE == training$label, ]
training_true = training[, TRUE == training$label]
training_true = training[training$label == 2, ]
training_true = training[training$n30 == 42, ]
training_true = training[training$label == TRUE, ]
which(training$label == 'TRUE')
which(training$label == 'True')
training_true = training[which(training$label == 'True'), ]
summary(training$label)
training_false = training[which(training$label == 'False'), ]
training_true-500 = training_true[1 : (length(training_true) - 500)]
training_false-500 = training_false[1 : (length(training_false) - 500)]
training_true-500 = training_true[1 : (length(training_true) - 500), ]
training_false-500 = training_false[1 : (length(training_false) - 500), ]
(length(training_true) - 500)
training_true-500 = training_true[1 : (nrows(training_true) - 500), ]
training_false-500 = training_false[1 : (nrows(training_false) - 500), ]
training_true-500 = training_true[1 : (nrow(training_true) - 500), ]
training_false-500 = training_false[1 : (nrow(training_false) - 500), ]
(nrow(training_true) - 500)
1 : (nrow(training_true) - 500)
training_true-500 = training_true[(1 : (nrow(training_true) - 500)), ]
(1 : (nrow(training_true) - 500))
idx = 1 : (nrow(training_true) - 500)
training_true-500 = training_true[idx, ]
training_true
training_true[1, ]
training_true[1:2, ]
training_true_drop500 = training_true[idx, ]
training_false_drop500 = training_false[(1 : (nrow(training_false) - 500)), ]
training_false_drop500 = training_false[1 : (nrow(training_false) - 500), ]
training_drop1000 = rbind(training_true_drop500, training_false_drop500)
predicted
forest
length(which(training_drop$vid == training_drop1000$vid))
length(which(training$vid == training_drop1000$vid))
training_true_idx = which(training$label == 'True')
summary(training$label)
training_true_idx = which(training$label == 'True')
training_false_idx = which(training$label == 'False')
training_true_drop500_idx = training_true_idx[1 : (length(training_true_idx) - 500)]
test_true_drop500_idx = test_true_idx[1 : (length(test_true_idx) - 500)]
training_true_drop500_idx = training_true_idx[1 : (length(training_true_idx) - 500)]
training_false_drop500_idx = training_false_idx[1 : (length(training_false_idx) - 500)]
training_drop1000_idx = c(training_true_drop500_idx, training_false_drop500_idx)
training_drop1000_idx[4548:4550]
training_drop1000_idx[4548:4555]
library(randomForest)
workpath = 'F:/Video_Popularity/'
#workpath = '/Users/ouyangshuxin/Documents/work/Video_Popularity/'
training = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/training/I30_training_bp_features', sep = ''), header = TRUE)
test = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/test/I30_test_bp_features', sep = ''), header = TRUE)
training$statuses_count = NULL
test$statuses_count = NULL
levels(test$public_type) = levels(training$public_type)
training_l = training[, 3]
training_f = as.data.frame(training[, 4:length(training)])
training_d = as.data.frame(training[, 3:length(training)])
test_l = test[, 3]
test_f = as.data.frame(test[, 4:length(test)])
test_d = as.data.frame(test[, 3:length(test)])
set.seed(10)
forest = randomForest(label ~ ., training_d, ntree = 501)
training_true_idx = which(training$label == 'True')
training_false_idx = which(training$label == 'False')
training_true_drop500_idx = training_true_idx[1 : (length(training_true_idx) - 500)]
training_false_drop500_idx = training_false_idx[1 : (length(training_false_idx) - 500)]
training_drop1000_idx = c(training_true_drop500_idx, training_false_drop500_idx)
summary(training$label)
ll = c(training_l[training_drop1000_idx])
pl = c(forest$predicted[training_drop1000_idx])
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
out_df <- data.frame(training[training_drop1000_idx]$vid, ll - 1, pl - 1);
out_df <- data.frame(training[training_drop1000_idx, ]$vid, ll - 1, pl - 1);
write.table(out_df,
file = paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/randomForest/I30_training_results', sep = ''),
sep = '\t', quote = FALSE, col.names = FALSE, row.names = FALSE)
test_true_idx = which(test$label == 'True')
test_false_idx = which(test$label == 'False')
test_true_drop500_idx = test_true_idx[1 : (length(test_true_idx) - 500)]
test_false_drop500_idx = test_false_idx[1 : (length(test_false_idx) - 500)]
test_drop1000_idx = c(test_true_drop500_idx, test_false_drop500_idx)
summary(test$label)
prediction = predict(forest, test_drop1000_f, type = 'class')
prediction = predict(forest, test_f, type = 'class')
ll = c(test_drop1000_l[training_drop1000_idx])
pl = c(prediction[training_drop1000_idx])
ll = c(test_l[training_drop1000_idx])
pl = c(prediction[training_drop1000_idx])
ll = c(test_l[test_drop1000_idx])
pl = c(prediction[test_drop1000_idx])
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
out_df <- data.frame(test[test_drop1000_idx, ]$vid, ll - 1, pl - 1);
write.table(out_df,
file = paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/randomForest/I30_test_results', sep = ''),
sep = '\t', quote = FALSE, col.names = FALSE, row.names = FALSE)
library(randomForest)
workpath = 'F:/Video_Popularity/'
#workpath = '/Users/ouyangshuxin/Documents/work/Video_Popularity/'
training = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/training/I30_training_bp_features', sep = ''), header = TRUE)
test = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/test/I30_test_bp_features', sep = ''), header = TRUE)
training$statuses_count = NULL
test$statuses_count = NULL
levels(test$public_type) = levels(training$public_type)
training_l = training[, 3]
training_f = as.data.frame(training[, 4:length(training)])
training_d = as.data.frame(training[, 3:length(training)])
test_l = test[, 3]
test_f = as.data.frame(test[, 4:length(test)])
test_d = as.data.frame(test[, 3:length(test)])
set.seed(10)
forest = randomForest(label ~ ., training_d, ntree = 501)
ll = c(training_l)
pl = c(forest$predicted)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
idx_fn = which(pl != ll & ll == 2)
idx_fp = which(pl != ll & ll == 1)
idx = c(idx_fn[501:], idx_fp[501:])
idx = c(idx_fn[1 : (length(idx_fn) - 500)], idx_fp[1 : (length(idx_fp) - 500)])
ll = ll[-idx, ]
ll = ll[-idx]
pl = pl[-idx]
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
length(which(pl == ll & ll == 1))
# not burst -> not burst
# not burst -> burst
length(which(pl != ll & ll == 1))
# training performance
ll = c(training_l)
pl = c(forest$predicted)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
# training performance
ll = c(training_l)
pl = c(forest$predicted)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
idx_fn = which(pl != ll & ll == 2)
idx_fp = which(pl != ll & ll == 1)
idx = c(idx_fn[1 : (length(idx_fn) - 500)], idx_fp[1 : (length(idx_fp) - 500)])
ll = ll[idx]
pl = pl[idx]
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
idx_drop = c(idx_fn[1 : 500], idx_fp[1 : 500])
ll = ll[-idx]
pl = pl[-idx]
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
ll = c(training_l)
pl = c(forest$predicted)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
idx_fn = which(pl != ll & ll == 2)
idx_fp = which(pl != ll & ll == 1)
idx_drop = c(idx_fn[1 : 500], idx_fp[1 : 500])
ll = ll[-idx]
pl = pl[-idx]
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
ll = c(training_l)
pl = c(forest$predicted)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
idx_fn = which(pl != ll & ll == 2)
idx_fp = which(pl != ll & ll == 1)
idx_drop = c(idx_fn[1 : 500], idx_fp[1 : 500])
ll = ll[-idx]
# training performance
ll = c(training_l)
pl = c(forest$predicted)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
idx_fn = which(pl != ll & ll == 2)
idx_fp = which(pl != ll & ll == 1)
idx_drop = c(idx_fn[1 : 500], idx_fp[1 : 500])
ll = ll[-idx_drop]
pl = pl[-idx_drop]
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
prediction = predict(forest, test_f, type = 'class')
ll = c(test_l)
pl = c(prediction)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
idx_fn = which(pl != ll & ll == 2)
idx_fp = which(pl != ll & ll == 1)
idx_drop = c(idx_fn[1 : 500], idx_fp[1 : 500])
ll = ll[-idx_drop]
pl = pl[-idx_drop]
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
library(randomForest)
workpath = 'F:/Video_Popularity/'
#workpath = '/Users/ouyangshuxin/Documents/work/Video_Popularity/'
training = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/training/I30_training_bp_features', sep = ''), header = TRUE)
test = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/test/I30_test_bp_features', sep = ''), header = TRUE)
training$statuses_count = NULL
test$statuses_count = NULL
levels(test$public_type) = levels(training$public_type)
training_l = training[, 3]
training_f = as.data.frame(training[, 4:length(training)])
training_d = as.data.frame(training[, 3:length(training)])
test_l = test[, 3]
test_f = as.data.frame(test[, 4:length(test)])
test_d = as.data.frame(test[, 3:length(test)])
set.seed(10)
forest = randomForest(label ~ ., training_d, ntree = 501)
# training - 1000 performance
ll = c(training_l)
pl = c(forest$predicted)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
idx_fn = which(pl != ll & ll == 2)
idx_fp = which(pl != ll & ll == 1)
idx_drop = c(idx_fn[1 : 500], idx_fp[1 : 500])
out_df <- data.frame(training[-idx_drop, ]$vid, ll[-idx_drop, ] - 1, pl[-idx_drop, ] - 1);
write.table(out_df,
file = paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/randomForest/I30_training_results', sep = ''),
sep = '\t', quote = FALSE, col.names = FALSE, row.names = FALSE)
# test - 1000 performance
prediction = predict(forest, test_f, type = 'class')
ll = c(test_l)
pl = c(prediction)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
idx_fn = which(pl != ll & ll == 2)
idx_fp = which(pl != ll & ll == 1)
idx_drop = c(idx_fn[1 : 500], idx_fp[1 : 500])
out_df <- data.frame(test[-idx_drop, ]$vid, ll[-idx_drop, ] - 1, pl[-idx_drop, ] - 1);
write.table(out_df,
file = paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/randomForest/I30_test_results', sep = ''),
sep = '\t', quote = FALSE, col.names = FALSE, row.names = FALSE)
# training - 1000 performance
ll = c(training_l)
pl = c(forest$predicted)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
idx_fn = which(pl != ll & ll == 2)
idx_fp = which(pl != ll & ll == 1)
idx_drop = c(idx_fn[1 : 500], idx_fp[1 : 500])
out_df <- data.frame(training[-idx_drop, ]$vid, ll[-idx_drop] - 1, pl[-idx_drop] - 1);
write.table(out_df,
file = paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/randomForest/I30_training_results', sep = ''),
sep = '\t', quote = FALSE, col.names = FALSE, row.names = FALSE)
# test - 1000 performance
prediction = predict(forest, test_f, type = 'class')
ll = c(test_l)
pl = c(prediction)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
idx_fn = which(pl != ll & ll == 2)
idx_fp = which(pl != ll & ll == 1)
idx_drop = c(idx_fn[1 : 500], idx_fp[1 : 500])
out_df <- data.frame(test[-idx_drop, ]$vid, ll[-idx_drop] - 1, pl[-idx_drop] - 1);
write.table(out_df,
file = paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/randomForest/I30_test_results', sep = ''),
sep = '\t', quote = FALSE, col.names = FALSE, row.names = FALSE)
library(randomForest)
workpath = 'F:/Video_Popularity/'
#workpath = '/Users/ouyangshuxin/Documents/work/Video_Popularity/'
training = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/training/I30_training_bp_features', sep = ''), header = TRUE)
test = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/test/I30_test_bp_features', sep = ''), header = TRUE)
training$statuses_count = NULL
test$statuses_count = NULL
levels(test$public_type) = levels(training$public_type)
training_l = training[, 3]
training_f = as.data.frame(training[, 4:length(training)])
training_d = as.data.frame(training[, 3:length(training)])
test_l = test[, 3]
test_f = as.data.frame(test[, 4:length(test)])
test_d = as.data.frame(test[, 3:length(test)])
set.seed(10)
forest = randomForest(label ~ ., training_d, ntree = 501)
# training - 1000 performance
ll = c(training_l)
pl = c(forest$predicted)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
idx_fn = which(pl != ll & ll == 2)
idx_fp = which(pl != ll & ll == 1)
idx_drop = c(idx_fn[1 : 500], idx_fp[1 : 500])
out_df <- data.frame(training[-idx_drop, ]$vid, ll[-idx_drop] - 1, pl[-idx_drop] - 1);
write.table(out_df,
file = paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/randomForest/I30_training_results', sep = ''),
sep = '\t', quote = FALSE, col.names = FALSE, row.names = FALSE)
# test - 1000 performance
prediction = predict(forest, test_f, type = 'class')
ll = c(test_l)
pl = c(prediction)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
idx_fn = which(pl != ll & ll == 2)
idx_fp = which(pl != ll & ll == 1)
idx_drop = c(idx_fn[1 : 500], idx_fp[1 : 500])
out_df <- data.frame(test[-idx_drop, ]$vid, ll[-idx_drop] - 1, pl[-idx_drop] - 1);
write.table(out_df,
file = paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/randomForest/I30_test_results', sep = ''),
sep = '\t', quote = FALSE, col.names = FALSE, row.names = FALSE)

library(randomForest)
workpath = 'F:/Video_Popularity/'
training = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/training/I30_training_bp_features', sep = ''), header = TRUE)
training_df = as.data.frame(training[, 3:length(training)])
set.seed(10)
myForestrf = randomForest(label ~ ., training_df)
test = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/test/I30_test_bp_features', sep = ''), header = TRUE)
predict = predict(myForestrf, test, type = 'class')
predict = predict(myForestrf, test, type = 'response')
predict = predict(myForestrf, test, type = 'class')
test_df = as.data.frame(test[, 3:length(test)])
predict = predict(myForestrf, test_df, type = 'class')
predict = predict(myForestrf, test, type = 'class')
summary(test$category)
length(test$category)
str(test$category)
str(training$category)
str(training$gender)
str(test$gender)
levels(test[1])
levels(test$V2)
levels(test$category)
predict = predict(myForestrf, test, type = 'class')
levels(test$title_len) == levels(train$title_len)
levels(test$title_len) == levels(training_df$title_len)
levels(test$vid) == levels(training_df$title_len)
levels(test$label) == levels(training_df$title_len)
levels(test$label) == levels(training_df$label)
levels(test$label) == levels(training_df$label)
levels(training_df$label)
predict = predict(myForestrf, test, type = 'prob')
levels(test$label)
levels(training_df$label)
str(training_df)
str(test)
levels(test$public_type) = levels(training$public_type)
predict = predict(myForestrf, test, type = 'class')
ll = c(test$label)
pl = c(predict)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
predict = predict(myForestrf, training, type = 'class')
ll = c(training$label)
pl = c(predict)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
print(predict)
print(myForestrf)
predict = predict(myForestrf, training, type = 'class')
ll = c(training$label)
pl = c(predict)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
test = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/test/I30_test_bp_features', sep = ''), header = TRUE)
levels(test$public_type) = levels(training$public_type)
predict = predict(myForestrf, test, type = 'class')
ll = c(test$label)
pl = c(predict)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
myForestrf$predicted
ll = c(training$label)
#pl = c(predict)
pl = c(myForestrf$predicted)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
install.packages("rpart")
library(rpart)
library(randomForest)
workpath = 'F:/Video_Popularity/'
training = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/training/I30_training_bp_features', sep = ''), header = TRUE)
training_df = as.data.frame(training[, 3:length(training)])
set.seed(10)
myForestrf = randomForest(label ~ ., training_df)
ll = c(training$label)
pl = c(myForestrf$predicted)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
library(randomForest)
workpath = 'F:/Video_Popularity/'
#workpath = '/Users/ouyangshuxin/Documents/work/Video_Popularity/'
training = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/training/I30_training_bp_features', sep = ''), header = TRUE)
test = read.table(paste(workpath, 'analysis/2_predict_value/PBML/150801+151017/burst_detection/test/I30_test_bp_features', sep = ''), header = TRUE)
training$statuses_count = NULL
test$statuses_count = NULL
levels(test$public_type) = levels(training$public_type)
training_l = training[, 3]
training_f = as.data.frame(training[, 4:length(training)])
training_d = as.data.frame(training[, 3:length(training)])
test_l = test[, 3]
test_f = as.data.frame(test[, 4:length(test)])
test_d = as.data.frame(test[, 3:length(test)])
set.seed(10)
forest = randomForest(label ~ ., training_d, ntree = 501)
prediction = predict(forest, test_f, type = 'class')
ll = c(test_l)
pl = c(prediction)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))

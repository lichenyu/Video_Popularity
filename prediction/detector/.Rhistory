#workpath = 'F:/Video_Popularity/'
workpath = '/Users/ouyangshuxin/Documents/Video_Popularity/'
data = read.table(paste(workpath, 'prediction/i7p3/burst_prediction/I30_training_bp_others', sep = ''))
i1 = data$V2
i2 = data$V3
i3 = data$V4
i4 = data$V5
i5 = data$V6
i6 = data$V7
i7 = data$V8
ni = rowSums(data[2:8])
n30 = rowSums(data[2:31])
burst = data$V32
bv = ni * burst
reg = lm(n30 ~ i1 + i2 + i3 + i4 + i5 + i6 + i7 + bv - 1, weights = (1 / n30)^2)
summary(reg)
reg$coefficients
library(randomForest)
#workpath = 'F:/Video_Popularity/'
workpath = '/Users/ouyangshuxin/Documents/Video_Popularity/'
training = read.table(paste(workpath, 'prediction/i7p1/burst_prediction/training_label_features', sep = ''), header = TRUE)
test = read.table(paste(workpath, 'prediction/i7p1/burst_prediction/test_label_features', sep = ''), header = TRUE)
training$statuses_count = NULL
test$statuses_count = NULL
levels(test$public_type) = levels(training$public_type)
training_l = training[, 3]
training_f = as.data.frame(training[, 4:length(training)])
training_d = as.data.frame(training[, 3:length(training)])
test_l = test[, 3]
test_f = as.data.frame(test[, 4:length(test)])
test_d = as.data.frame(test[, 3:length(test)])
set.seed(21)
forest = randomForest(label ~ ., training_d, ntree = 501)
# --------------------------------------------------
# # training performance
# ll = c(training_l)
# pl = c(forest$predicted)
# # burst
# length(which(ll == 2))
# # not burst
# length(which(ll == 1))
# # burst -> burst
# length(which(pl == ll & ll == 2))
# # burst -> not burst
# length(which(pl != ll & ll == 2))
# # not burst -> not burst
# length(which(pl == ll & ll == 1))
# # not burst -> burst
# length(which(pl != ll & ll == 1))
#
# out_df <- data.frame(training$vid, ll - 1, pl - 1);
# write.table(out_df,
#             file = paste(workpath, 'prediction/i7p1/burst_prediction/training_bprslts', sep = ''),
#             sep = '\t', quote = FALSE, col.names = FALSE, row.names = FALSE)
#
#
#
# # test performance
# prediction = predict(forest, test_f, type = 'class')
# ll = c(test_l)
# pl = c(prediction)
# # burst
# length(which(ll == 2))
# # not burst
# length(which(ll == 1))
# # burst -> burst
# length(which(pl == ll & ll == 2))
# # burst -> not burst
# length(which(pl != ll & ll == 2))
# # not burst -> not burst
# length(which(pl == ll & ll == 1))
# # not burst -> burst
# length(which(pl != ll & ll == 1))
#
# out_df <- data.frame(test$vid, ll - 1, pl - 1);
# write.table(out_df,
#             file = paste(workpath, 'prediction/i7p1/burst_prediction/test_bprslts', sep = ''),
#             sep = '\t', quote = FALSE, col.names = FALSE, row.names = FALSE)
# --------------------------------------------------
# training - 1000 performance
ll = c(training_l)
pl = c(forest$predicted)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
idx_fn = which(pl != ll & ll == 2)
idx_fp = which(pl != ll & ll == 1)
if (500 <= length(idx_fp)) {
idx_drop = c(idx_fn[1 : 500], idx_fp[1 : 500])
} else {
idx_drop = c(idx_fn[1 : 500], idx_fp[1 : length(idx_fp)])
}
out_df <- data.frame(training[-idx_drop, ]$vid, ll[-idx_drop] - 1, pl[-idx_drop] - 1);
write.table(out_df,
file = paste(workpath, 'prediction/i7p1/burst_prediction/training_bprslts', sep = ''),
sep = '\t', quote = FALSE, col.names = FALSE, row.names = FALSE)
# test - 1000 performance
prediction = predict(forest, test_f, type = 'class')
ll = c(test_l)
pl = c(prediction)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
idx_fn = which(pl != ll & ll == 2)
idx_fp = which(pl != ll & ll == 1)
if (500 <= length(idx_fp)) {
idx_drop = c(idx_fn[1 : 500], idx_fp[1 : 500])
} else {
idx_drop = c(idx_fn[1 : 500], idx_fp[1 : length(idx_fp)])
}
out_df <- data.frame(test[-idx_drop, ]$vid, ll[-idx_drop] - 1, pl[-idx_drop] - 1);
write.table(out_df,
file = paste(workpath, 'prediction/i7p1/burst_prediction/test_bprslts', sep = ''),
sep = '\t', quote = FALSE, col.names = FALSE, row.names = FALSE)
#workpath = 'F:/Video_Popularity/'
workpath = '/Users/ouyangshuxin/Documents/Video_Popularity/'
data = read.table(paste(workpath, 'prediction/i7p1/burst_prediction/I30_training_bp_others', sep = ''))
i1 = data$V2
i2 = data$V3
i3 = data$V4
i4 = data$V5
i5 = data$V6
i6 = data$V7
i7 = data$V8
ni = rowSums(data[2:8])
n30 = rowSums(data[2:31])
burst = data$V32
bv = ni * burst
reg = lm(n30 ~ i1 + i2 + i3 + i4 + i5 + i6 + i7 + bv - 1, weights = (1 / n30)^2)
summary(reg)
reg$coefficients
#workpath = 'F:/Video_Popularity/'
workpath = '/Users/ouyangshuxin/Documents/Video_Popularity/'
data = read.table(paste(workpath, 'prediction/i7p2/burst_prediction/I30_training_bp_1000000', sep = ''))
i1 = data$V2
i2 = data$V3
i3 = data$V4
i4 = data$V5
i5 = data$V6
i6 = data$V7
i7 = data$V8
ni = rowSums(data[2:8])
n30 = rowSums(data[2:31])
burst = data$V32
bv = ni * burst
reg = lm(n30 ~ i1 + i2 + i3 + i4 + i5 + i6 + i7 + bv - 1, weights = (1 / n30)^2)
summary(reg)
reg$coefficients
#workpath = 'F:/Video_Popularity/'
workpath = '/Users/ouyangshuxin/Documents/Video_Popularity/'
data = read.table(paste(workpath, 'prediction/i7p2/burst_prediction/I30_training_bp_others', sep = ''))
i1 = data$V2
i2 = data$V3
i3 = data$V4
i4 = data$V5
i5 = data$V6
i6 = data$V7
i7 = data$V8
ni = rowSums(data[2:8])
n30 = rowSums(data[2:31])
burst = data$V32
bv = ni * burst
reg = lm(n30 ~ i1 + i2 + i3 + i4 + i5 + i6 + i7 + bv - 1, weights = (1 / n30)^2)
summary(reg)
reg$coefficients
library(randomForest)
#workpath = 'F:/Video_Popularity/'
workpath = '/Users/ouyangshuxin/Documents/Video_Popularity/'
training = read.table(paste(workpath, 'prediction/i7p4/burst_prediction/training_label_features', sep = ''), header = TRUE)
test = read.table(paste(workpath, 'prediction/i7p4/burst_prediction/test_label_features', sep = ''), header = TRUE)
training$statuses_count = NULL
test$statuses_count = NULL
levels(test$public_type) = levels(training$public_type)
training_l = training[, 3]
training_f = as.data.frame(training[, 4:length(training)])
training_d = as.data.frame(training[, 3:length(training)])
test_l = test[, 3]
test_f = as.data.frame(test[, 4:length(test)])
test_d = as.data.frame(test[, 3:length(test)])
set.seed(21)
forest = randomForest(label ~ ., training_d, ntree = 501)
# --------------------------------------------------
# # training performance
# ll = c(training_l)
# pl = c(forest$predicted)
# # burst
# length(which(ll == 2))
# # not burst
# length(which(ll == 1))
# # burst -> burst
# length(which(pl == ll & ll == 2))
# # burst -> not burst
# length(which(pl != ll & ll == 2))
# # not burst -> not burst
# length(which(pl == ll & ll == 1))
# # not burst -> burst
# length(which(pl != ll & ll == 1))
#
# out_df <- data.frame(training$vid, ll - 1, pl - 1);
# write.table(out_df,
#             file = paste(workpath, 'prediction/i7p4/burst_prediction/training_bprslts', sep = ''),
#             sep = '\t', quote = FALSE, col.names = FALSE, row.names = FALSE)
#
#
#
# # test performance
# prediction = predict(forest, test_f, type = 'class')
# ll = c(test_l)
# pl = c(prediction)
# # burst
# length(which(ll == 2))
# # not burst
# length(which(ll == 1))
# # burst -> burst
# length(which(pl == ll & ll == 2))
# # burst -> not burst
# length(which(pl != ll & ll == 2))
# # not burst -> not burst
# length(which(pl == ll & ll == 1))
# # not burst -> burst
# length(which(pl != ll & ll == 1))
#
# out_df <- data.frame(test$vid, ll - 1, pl - 1);
# write.table(out_df,
#             file = paste(workpath, 'prediction/i7p4/burst_prediction/test_bprslts', sep = ''),
#             sep = '\t', quote = FALSE, col.names = FALSE, row.names = FALSE)
# --------------------------------------------------
# training - 1000 performance
ll = c(training_l)
pl = c(forest$predicted)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
idx_fn = which(pl != ll & ll == 2)
idx_fp = which(pl != ll & ll == 1)
if (500 <= length(idx_fp)) {
idx_drop = c(idx_fn[1 : 500], idx_fp[1 : 500])
} else {
idx_drop = c(idx_fn[1 : 500], idx_fp[1 : length(idx_fp)])
}
out_df <- data.frame(training[-idx_drop, ]$vid, ll[-idx_drop] - 1, pl[-idx_drop] - 1);
write.table(out_df,
file = paste(workpath, 'prediction/i7p4/burst_prediction/training_bprslts', sep = ''),
sep = '\t', quote = FALSE, col.names = FALSE, row.names = FALSE)
# test - 1000 performance
prediction = predict(forest, test_f, type = 'class')
ll = c(test_l)
pl = c(prediction)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
idx_fn = which(pl != ll & ll == 2)
idx_fp = which(pl != ll & ll == 1)
if (500 <= length(idx_fp)) {
idx_drop = c(idx_fn[1 : 500], idx_fp[1 : 500])
} else {
idx_drop = c(idx_fn[1 : 500], idx_fp[1 : length(idx_fp)])
}
out_df <- data.frame(test[-idx_drop, ]$vid, ll[-idx_drop] - 1, pl[-idx_drop] - 1);
write.table(out_df,
file = paste(workpath, 'prediction/i7p4/burst_prediction/test_bprslts', sep = ''),
sep = '\t', quote = FALSE, col.names = FALSE, row.names = FALSE)
#workpath = 'F:/Video_Popularity/'
workpath = '/Users/ouyangshuxin/Documents/Video_Popularity/'
data = read.table(paste(workpath, 'prediction/i7p4/burst_prediction/I30_training_bp_1000000', sep = ''))
i1 = data$V2
i2 = data$V3
i3 = data$V4
i4 = data$V5
i5 = data$V6
i6 = data$V7
i7 = data$V8
ni = rowSums(data[2:8])
n30 = rowSums(data[2:31])
burst = data$V32
bv = ni * burst
reg = lm(n30 ~ i1 + i2 + i3 + i4 + i5 + i6 + i7 + bv - 1, weights = (1 / n30)^2)
summary(reg)
reg$coefficients
#workpath = 'F:/Video_Popularity/'
workpath = '/Users/ouyangshuxin/Documents/Video_Popularity/'
data = read.table(paste(workpath, 'prediction/i7p4/burst_prediction/I30_training_bp_1100000', sep = ''))
i1 = data$V2
i2 = data$V3
i3 = data$V4
i4 = data$V5
i5 = data$V6
i6 = data$V7
i7 = data$V8
ni = rowSums(data[2:8])
n30 = rowSums(data[2:31])
burst = data$V32
bv = ni * burst
reg = lm(n30 ~ i1 + i2 + i3 + i4 + i5 + i6 + i7 + bv - 1, weights = (1 / n30)^2)
summary(reg)
reg$coefficients
#workpath = 'F:/Video_Popularity/'
workpath = '/Users/ouyangshuxin/Documents/Video_Popularity/'
data = read.table(paste(workpath, 'prediction/i7p4/burst_prediction/I30_training_bp_0000000', sep = ''))
i1 = data$V2
i2 = data$V3
i3 = data$V4
i4 = data$V5
i5 = data$V6
i6 = data$V7
i7 = data$V8
ni = rowSums(data[2:8])
n30 = rowSums(data[2:31])
burst = data$V32
bv = ni * burst
reg = lm(n30 ~ i1 + i2 + i3 + i4 + i5 + i6 + i7 + bv - 1, weights = (1 / n30)^2)
summary(reg)
reg$coefficients
#workpath = 'F:/Video_Popularity/'
workpath = '/Users/ouyangshuxin/Documents/Video_Popularity/'
data = read.table(paste(workpath, 'prediction/i7p4/burst_prediction/I30_training_bp_others', sep = ''))
i1 = data$V2
i2 = data$V3
i3 = data$V4
i4 = data$V5
i5 = data$V6
i6 = data$V7
i7 = data$V8
ni = rowSums(data[2:8])
n30 = rowSums(data[2:31])
burst = data$V32
bv = ni * burst
reg = lm(n30 ~ i1 + i2 + i3 + i4 + i5 + i6 + i7 + bv - 1, weights = (1 / n30)^2)
summary(reg)
reg$coefficients
library(randomForest)
#workpath = 'F:/Video_Popularity/'
workpath = '/Users/ouyangshuxin/Documents/Video_Popularity/'
training = read.table(paste(workpath, 'prediction/i7p4/burst_prediction/training_label_features', sep = ''), header = TRUE)
test = read.table(paste(workpath, 'prediction/i7p4/burst_prediction/test_label_features', sep = ''), header = TRUE)
training$statuses_count = NULL
test$statuses_count = NULL
levels(test$public_type) = levels(training$public_type)
training_l = training[, 3]
training_f = as.data.frame(training[, 4:length(training)])
training_d = as.data.frame(training[, 3:length(training)])
test_l = test[, 3]
test_f = as.data.frame(test[, 4:length(test)])
test_d = as.data.frame(test[, 3:length(test)])
library(randomForest)
#workpath = 'F:/Video_Popularity/'
workpath = '/Users/ouyangshuxin/Documents/Video_Popularity/'
training = read.table(paste(workpath, 'prediction/i7p4/burst_prediction/training_label_features', sep = ''), header = TRUE)
test = read.table(paste(workpath, 'prediction/i7p4/burst_prediction/test_label_features', sep = ''), header = TRUE)
training$statuses_count = NULL
test$statuses_count = NULL
levels(test$public_type) = levels(training$public_type)
training_l = training[, 3]
training_f = as.data.frame(training[, 4:length(training)])
training_d = as.data.frame(training[, 3:length(training)])
test_l = test[, 3]
test_f = as.data.frame(test[, 4:length(test)])
test_d = as.data.frame(test[, 3:length(test)])
set.seed(21)
forest = randomForest(label ~ ., training_d, ntree = 501)
prediction = predict(forest, test_f, type = 'class')
ll = c(test_l)
pl = c(prediction)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
set.seed(21)
forest = randomForest(lable ~ title_len + title_cnchar_num + title_cnchar_rate + title_noncnchar_num + title_noncnchar_rate + title_digit_num + title_digit_rate + title_letter_num + title_letter_rate + title_space_num + title_space_rate + title_booktitle_flag + video_des_len + gender + videos_count + playlists_count + favorites_count + followers_count + following_count + statuses_count + subscribe_count + vv_count + is_vip + is_share + is_verified + user_len + user_cnchar_num + user_cnchar_rate + user_noncnchar_num + user_noncnchar_rate + user_digit_num + user_digit_rate + user_letter_num + user_letter_rate + user_des_len + i1 + i2 + i3 + i4 + i5 + i6 + i7 + n7 + i1_pct + i2_pct + i3_pct + i4_pct + i5_pct + i6_pct + i7_pct, training_d, ntree = 501)
set.seed(21)
forest = randomForest(lable ~ title_len + title_cnchar_num + title_cnchar_rate + title_noncnchar_num + title_noncnchar_rate + title_digit_num + title_digit_rate + title_letter_num + title_letter_rate + title_space_num + title_space_rate + title_booktitle_flag + video_des_len + gender + videos_count + playlists_count + favorites_count + followers_count + following_count + statuses_count + subscribe_count + vv_count + is_vip + is_share + is_verified + user_len + user_cnchar_num + user_cnchar_rate + user_noncnchar_num + user_noncnchar_rate + user_digit_num + user_digit_rate + user_letter_num + user_letter_rate + user_des_len + i1 + i2 + i3 + i4 + i5 + i6 + i7 + n7 + i1_pct + i2_pct + i3_pct + i4_pct + i5_pct + i6_pct + i7_pct, training_d, ntree = 501)
set.seed(21)
forest = randomForest(label ~ title_len + title_cnchar_num + title_cnchar_rate + title_noncnchar_num + title_noncnchar_rate + title_digit_num + title_digit_rate + title_letter_num + title_letter_rate + title_space_num + title_space_rate + title_booktitle_flag + video_des_len + gender + videos_count + playlists_count + favorites_count + followers_count + following_count + statuses_count + subscribe_count + vv_count + is_vip + is_share + is_verified + user_len + user_cnchar_num + user_cnchar_rate + user_noncnchar_num + user_noncnchar_rate + user_digit_num + user_digit_rate + user_letter_num + user_letter_rate + user_des_len + i1 + i2 + i3 + i4 + i5 + i6 + i7 + n7 + i1_pct + i2_pct + i3_pct + i4_pct + i5_pct + i6_pct + i7_pct, training_d, ntree = 501)
set.seed(21)
forest = randomForest(label ~ title_len + title_cnchar_num + title_cnchar_rate + title_noncnchar_num + title_noncnchar_rate + title_digit_num + title_digit_rate + title_letter_num + title_letter_rate + title_space_num + title_space_rate + title_booktitle_flag + video_des_len + gender + videos_count + playlists_count + favorites_count + followers_count + following_count + subscribe_count + vv_count + is_vip + is_share + is_verified + user_len + user_cnchar_num + user_cnchar_rate + user_noncnchar_num + user_noncnchar_rate + user_digit_num + user_digit_rate + user_letter_num + user_letter_rate + user_des_len + i1 + i2 + i3 + i4 + i5 + i6 + i7 + n7 + i1_pct + i2_pct + i3_pct + i4_pct + i5_pct + i6_pct + i7_pct, training_d, ntree = 501)
prediction = predict(forest, test_f, type = 'class')
ll = c(test_l)
pl = c(prediction)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
2272 + 9156
set.seed(21)
forest = randomForest(label ~ duration + category + public_type + tag_num + copyright_type + streamtype_num + streamtypes_hd2 + gender + videos_count + playlists_count + favorites_count + followers_count + following_count + subscribe_count + vv_count + is_vip + is_share + is_verified + user_len + user_cnchar_num + user_cnchar_rate + user_noncnchar_num + user_noncnchar_rate + user_digit_num + user_digit_rate + user_letter_num + user_letter_rate + user_des_len + i1 + i2 + i3 + i4 + i5 + i6 + i7 + n7 + i1_pct + i2_pct + i3_pct + i4_pct + i5_pct + i6_pct + i7_pct, training_d, ntree = 501)
# test - 1000 performance
prediction = predict(forest, test_f, type = 'class')
ll = c(test_l)
pl = c(prediction)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
2424 + 9016
2411 + 9109
set.seed(21)
forest = randomForest(label ~ duration + category + public_type + tag_num + copyright_type + streamtype_num + streamtypes_hd2 + title_len + title_cnchar_num + title_cnchar_rate + title_noncnchar_num + title_noncnchar_rate + title_digit_num + title_digit_rate + title_letter_num + title_letter_rate + title_space_num + title_space_rate + title_booktitle_flag + video_des_len + user_len + user_cnchar_num + user_cnchar_rate + user_noncnchar_num + user_noncnchar_rate + user_digit_num + user_digit_rate + user_letter_num + user_letter_rate + user_des_len + i1 + i2 + i3 + i4 + i5 + i6 + i7 + n7 + i1_pct + i2_pct + i3_pct + i4_pct + i5_pct + i6_pct + i7_pct, training_d, ntree = 501)
# test - 1000 performance
prediction = predict(forest, test_f, type = 'class')
ll = c(test_l)
pl = c(prediction)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
length(which(pl == ll & ll == 2))
# burst -> burst
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
2440 + 9049
set.seed(21)
forest = randomForest(label ~ duration + category + public_type + tag_num + copyright_type + streamtype_num + streamtypes_hd2 + title_len + title_cnchar_num + title_cnchar_rate + title_noncnchar_num + title_noncnchar_rate + title_digit_num + title_digit_rate + title_letter_num + title_letter_rate + title_space_num + title_space_rate + title_booktitle_flag + video_des_len + gender + videos_count + playlists_count + favorites_count + followers_count + following_count + subscribe_count + vv_count + is_vip + is_share + is_verified + i1 + i2 + i3 + i4 + i5 + i6 + i7 + n7 + i1_pct + i2_pct + i3_pct + i4_pct + i5_pct + i6_pct + i7_pct, training_d, ntree = 501)
# test - 1000 performance
prediction = predict(forest, test_f, type = 'class')
ll = c(test_l)
pl = c(prediction)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
2398 + 9076
set.seed(21)
forest = randomForest(label ~ duration + category + public_type + tag_num + copyright_type + streamtype_num + streamtypes_hd2 + title_len + title_cnchar_num + title_cnchar_rate + title_noncnchar_num + title_noncnchar_rate + title_digit_num + title_digit_rate + title_letter_num + title_letter_rate + title_space_num + title_space_rate + title_booktitle_flag + video_des_len + gender + videos_count + playlists_count + favorites_count + followers_count + following_count + subscribe_count + vv_count + is_vip + is_share + is_verified + user_len + user_cnchar_num + user_cnchar_rate + user_noncnchar_num + user_noncnchar_rate + user_digit_num + user_digit_rate + user_letter_num + user_letter_rate + user_des_len, training_d, ntree = 501)
# test - 1000 performance
prediction = predict(forest, test_f, type = 'class')
ll = c(test_l)
pl = c(prediction)
# burst
length(which(ll == 2))
# not burst
length(which(ll == 1))
# burst -> burst
length(which(pl == ll & ll == 2))
# burst -> not burst
length(which(pl != ll & ll == 2))
# not burst -> not burst
length(which(pl == ll & ll == 1))
# not burst -> burst
length(which(pl != ll & ll == 1))
1569 + 9168
